// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.3
// source: stream.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Req) Reset() {
	*x = Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Req) ProtoMessage() {}

func (x *Req) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Req.ProtoReflect.Descriptor instead.
func (*Req) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{0}
}

func (x *Req) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Res struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Res) Reset() {
	*x = Res{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Res) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Res) ProtoMessage() {}

func (x *Res) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Res.ProtoReflect.Descriptor instead.
func (*Res) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{1}
}

func (x *Res) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

var File_stream_proto protoreflect.FileDescriptor

var file_stream_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x19,
	0x0a, 0x03, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x19, 0x0a, 0x03, 0x52, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x32, 0x54, 0x0a, 0x05, 0x47, 0x72, 0x65, 0x65, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x12, 0x04, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x04,
	0x2e, 0x52, 0x65, 0x73, 0x30, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x50, 0x75, 0x74, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x04, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x04, 0x2e, 0x52, 0x65, 0x73, 0x28, 0x01, 0x12,
	0x19, 0x0a, 0x07, 0x41, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x12, 0x04, 0x2e, 0x52, 0x65, 0x71,
	0x1a, 0x04, 0x2e, 0x52, 0x65, 0x73, 0x28, 0x01, 0x30, 0x01, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f,
	0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stream_proto_rawDescOnce sync.Once
	file_stream_proto_rawDescData = file_stream_proto_rawDesc
)

func file_stream_proto_rawDescGZIP() []byte {
	file_stream_proto_rawDescOnce.Do(func() {
		file_stream_proto_rawDescData = protoimpl.X.CompressGZIP(file_stream_proto_rawDescData)
	})
	return file_stream_proto_rawDescData
}

var file_stream_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_stream_proto_goTypes = []interface{}{
	(*Req)(nil), // 0: Req
	(*Res)(nil), // 1: Res
}
var file_stream_proto_depIdxs = []int32{
	0, // 0: Greet.Getdata:input_type -> Req
	0, // 1: Greet.Putdata:input_type -> Req
	0, // 2: Greet.Alldata:input_type -> Req
	1, // 3: Greet.Getdata:output_type -> Res
	1, // 4: Greet.Putdata:output_type -> Res
	1, // 5: Greet.Alldata:output_type -> Res
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_stream_proto_init() }
func file_stream_proto_init() {
	if File_stream_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_stream_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stream_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Res); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stream_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_stream_proto_goTypes,
		DependencyIndexes: file_stream_proto_depIdxs,
		MessageInfos:      file_stream_proto_msgTypes,
	}.Build()
	File_stream_proto = out.File
	file_stream_proto_rawDesc = nil
	file_stream_proto_goTypes = nil
	file_stream_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GreetClient is the client API for Greet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GreetClient interface {
	Getdata(ctx context.Context, in *Req, opts ...grpc.CallOption) (Greet_GetdataClient, error)
	Putdata(ctx context.Context, opts ...grpc.CallOption) (Greet_PutdataClient, error)
	Alldata(ctx context.Context, opts ...grpc.CallOption) (Greet_AlldataClient, error)
}

type greetClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetClient(cc grpc.ClientConnInterface) GreetClient {
	return &greetClient{cc}
}

func (c *greetClient) Getdata(ctx context.Context, in *Req, opts ...grpc.CallOption) (Greet_GetdataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Greet_serviceDesc.Streams[0], "/Greet/Getdata", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetGetdataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greet_GetdataClient interface {
	Recv() (*Res, error)
	grpc.ClientStream
}

type greetGetdataClient struct {
	grpc.ClientStream
}

func (x *greetGetdataClient) Recv() (*Res, error) {
	m := new(Res)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetClient) Putdata(ctx context.Context, opts ...grpc.CallOption) (Greet_PutdataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Greet_serviceDesc.Streams[1], "/Greet/Putdata", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetPutdataClient{stream}
	return x, nil
}

type Greet_PutdataClient interface {
	Send(*Req) error
	CloseAndRecv() (*Res, error)
	grpc.ClientStream
}

type greetPutdataClient struct {
	grpc.ClientStream
}

func (x *greetPutdataClient) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetPutdataClient) CloseAndRecv() (*Res, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Res)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetClient) Alldata(ctx context.Context, opts ...grpc.CallOption) (Greet_AlldataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Greet_serviceDesc.Streams[2], "/Greet/Alldata", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetAlldataClient{stream}
	return x, nil
}

type Greet_AlldataClient interface {
	Send(*Req) error
	Recv() (*Res, error)
	grpc.ClientStream
}

type greetAlldataClient struct {
	grpc.ClientStream
}

func (x *greetAlldataClient) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetAlldataClient) Recv() (*Res, error) {
	m := new(Res)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetServer is the server API for Greet service.
type GreetServer interface {
	Getdata(*Req, Greet_GetdataServer) error
	Putdata(Greet_PutdataServer) error
	Alldata(Greet_AlldataServer) error
}

// UnimplementedGreetServer can be embedded to have forward compatible implementations.
type UnimplementedGreetServer struct {
}

func (*UnimplementedGreetServer) Getdata(*Req, Greet_GetdataServer) error {
	return status.Errorf(codes.Unimplemented, "method Getdata not implemented")
}
func (*UnimplementedGreetServer) Putdata(Greet_PutdataServer) error {
	return status.Errorf(codes.Unimplemented, "method Putdata not implemented")
}
func (*UnimplementedGreetServer) Alldata(Greet_AlldataServer) error {
	return status.Errorf(codes.Unimplemented, "method Alldata not implemented")
}

func RegisterGreetServer(s *grpc.Server, srv GreetServer) {
	s.RegisterService(&_Greet_serviceDesc, srv)
}

func _Greet_Getdata_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Req)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreetServer).Getdata(m, &greetGetdataServer{stream})
}

type Greet_GetdataServer interface {
	Send(*Res) error
	grpc.ServerStream
}

type greetGetdataServer struct {
	grpc.ServerStream
}

func (x *greetGetdataServer) Send(m *Res) error {
	return x.ServerStream.SendMsg(m)
}

func _Greet_Putdata_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetServer).Putdata(&greetPutdataServer{stream})
}

type Greet_PutdataServer interface {
	SendAndClose(*Res) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type greetPutdataServer struct {
	grpc.ServerStream
}

func (x *greetPutdataServer) SendAndClose(m *Res) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetPutdataServer) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Greet_Alldata_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetServer).Alldata(&greetAlldataServer{stream})
}

type Greet_AlldataServer interface {
	Send(*Res) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type greetAlldataServer struct {
	grpc.ServerStream
}

func (x *greetAlldataServer) Send(m *Res) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetAlldataServer) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Greet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Greet",
	HandlerType: (*GreetServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Getdata",
			Handler:       _Greet_Getdata_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Putdata",
			Handler:       _Greet_Putdata_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Alldata",
			Handler:       _Greet_Alldata_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stream.proto",
}
